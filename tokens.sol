
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract tokens {

    struct player{
        string name;
        uint age;
        uint points;
    }

    struct tradePlayers{
        string name;
        bool trade;
        uint price;
    }

    player[] team;
    tradePlayers[] market;

    uint marker = 1;

    mapping(uint => uint) tokenToOwner;
    mapping(string => uint) getId;

    modifier onlyOwner(uint tokenId) {
        require(msg.pubkey() == tokenToOwner[tokenId],101);
        tvm.accept();    
        _;
    }

    // Modifier not work
  /*  modifier checkName(string name) {
        uint playerId = marker;
        getId[name] = playerId;       
        if (playerId == 1){
            playerId++;
            _;
        } else if (playerId > 1){
            for (uint i = 1; i <= playerId; i++){
                if (team[i - 1].name == name){
                    break;
                } 
                else {
                 playerId++;
                 _;
                }
            }
        }
    } */

    function createToken(string name, uint age, uint points) public checkName(name)  returns(string) {
        tvm.accept();
        team.push(player(name, age, points));
        market.push(tradePlayers(name, false, 0));
        uint numberMyToken = team.length - 1;
        tokenToOwner[numberMyToken] = msg.pubkey();
    }

    function getTokenOwner(uint tokenId) public view returns(uint) {
        tvm.accept();
        return tokenToOwner[tokenId];
    }

    function getTokenInfo(uint tokenId) public view returns(string tokenName, uint tokenAge, uint tokenPoints){
        tvm.accept();
        tokenName = team[tokenId].name;
        tokenAge = team[tokenId].age;
        tokenPoints = team[tokenId].points;
    }

    function givePriceToken(uint tokenId, uint amount) public onlyOwner(tokenId) {
        market[tokenId].trade = true;
        market[tokenId].price = amount;
    }

    function getTokensMarket(uint tokenId) public view returns(string tokenName, bool tokenTrade, uint tokenPrice){
        tvm.accept();
        tokenName = market[tokenId].name;
        tokenTrade = market[tokenId].trade;
        tokenPrice = market[tokenId].price;
    }

    constructor() public {
        require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
    }
}
